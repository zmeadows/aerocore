/* vim: set filetype=journal */

====
TODO
====

figure out transform from SVG path to polygon decomp (inverse of to_screen_coords)

Animation FSM
    * (time) -> Sprite*
    * sprite change

Draw stabber

add 'autonomous' flag to entity for cases where they control themselves.

give stabber 'valid range' OSB
make stabber rotate while re-locating
make stabber have different relocation and stab speed
make stabber slightly homing towards player while stabbing

replace cout with printf

switch to OpenGL

add small amount of homing to stabber? rotate towards player and slightly adjust trajectory.

create package to make general parmaeterized arcs?

make asteroids bounce off each other.

use std::atexit to book destructors of global SDL/font/etc.

add +=, *=, -= to v2 class

turn resource manager into bucket array

in motion system, fill delta array first, then loop fusion over to modify...?


configure ResourceManager so that ALL memory for the game is stored in one giant block: not sure how much this helps.

write script to open Instruments and profile code easily

create a debug overlay

create dev-mode toggle so that tab key toggles between common testing scenarios

add 'penetration' and stuff to collisions so that more compliated behavior can be
done on collision, like bouncing, rather than just death

separate entities for update frequency, by velocity?

??? leave objects pre-created and don't recreate them in the ResourceManager each
time the space is re-booked

store individual polygon decomposition elements in QuadTree ?

add item to GraphicsContext that tells you how big a pixel is in grid coordinates

use followed UUID set special sorting procedure to determine draw order incrementally

jonathan blow, mike acton, casey (handmade hero)




get font rendering working

make player explode when dies and give death message and 'press spacebar to retry'


make debug overlay showing number of entities, fps, etc

add switch to ComponentManager to record debug information:
    * calls/second to different methods
    * total memory allocated
    * total number of entities
    * creation/destruction rate of entities

set FX hotkeys to turn on/off:
    * Draw QuadTree
    * Draw Polygon Decompositions
    * Draw ECS Statistics Overlay

write script to do code coverage test

clean up quad tree and collision code (automatic node release?)

do monotone polygon decomposition instead of triangulation

make quad tree adaptive (if slowdown occurs)

new alternative to UUIDSet that is sorted according to ResourceManager handle instead of UUID for beter CPU cache friendliness

add enemies: (new system for each new enemy with distinct behavior/state)
    * basic charging enemy

add speed limit to player

add basic powers:
    * bombs
    * triple shot
    * laser beam
    * better ship handling/speed (add more drag to ship and increase max speed)
    * slow down time for player only (i.e. apply different dt for enemies/players)



====
DONE
====

Flush out details of time per frame.
    - lock frame rate at some fixed value (35?)
    - have motion/collisions/whatever not depend on this value directly, but on a timestep determined by the framerate.
    - create Timer class

Create GraphicsContext class that contains:
  - integer pixel coordinates vs. continous game grid coordinates utility functions
  - all SDL pointers necessary (renderer/window/surface/etc)
  - window/screen width/height constants

Create UUIDSet class

rename Vector2f to just V2

Set up QuadTree (as soon as notice any slowdown from O(n^2) collision detection currently)

create generic destroy_entity code

don't triangulate an already-convex polygon

make asteroids explode

make asteroid shards fade out

rename CoreData to Entity so you can use the intuitive 'entity' variable
name.

Fix orientation system and be clear about rotation/fmod/atan/etc

compute extent/local/global vertices ONE TIME at start of each frame.

figure out why FPS calculation always says 60fps

remove STL

write function to transform a vector set so that the origin is geometric/weighted center

make global variables:
    * ComponentManager
    * GraphicsContext
    * AudioContext

add basic audio

combine motion and collision systems

set up #defines and whatever in CMake so that an easy-to-use asset path is defined

fix clang compile warnings

clean & re-organize #includes

fix entity wrapping
